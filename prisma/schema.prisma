// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CollaboratorType {
  registrado
  pj
  diarista
}

enum RetreatTypes {
  collaborator
  department
}

enum Level {
  dev
  admin
  user
}

model User {
  id            String          @id @default(uuid())
  first_name    String
  last_name     String
  email         String
  user          String          @unique
  passwd        String
  level         Level           @default(user)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Output        Output[]
  OutputHistory OutputHistory[]
  Return        Return[]
  Input         Input[]

  @@map("users")
}

model Collaborator {
  id         String           @id @default(uuid())
  name       String
  cpf        String           @unique
  type       CollaboratorType
  canRetreat RetreatTypes[]   @default([])
  active     Boolean          @default(true)
  department String
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  Department           Department           @relation(fields: [department], references: [department])
  Leader               Leader[]
  Outputs              Output[]             @relation("collaborator")
  OutputHistory        OutputHistory[]      @relation("collaborator")
  ResponsibleReturnIn  Return[]             @relation("responsible_in")
  ResponsibleReturnOut Return[]             @relation("responsible_out")
  OutputOrder          OutputOrder[]        @relation("collaborator")
  OutputOrderHistory   OutputOrderHistory[] @relation("collaborator")

  @@map("collaborators")
}

model Department {
  department String   @id
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  Department_Leader Department_Leader[]
  Collaborator      Collaborator[]
  Products          ProductsOnDepartments[]

  @@map("departments")
}

model Leader {
  id              String   @id @default(uuid())
  collaborator_id String
  email           String
  phone           String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  Collaborator      Collaborator        @relation(fields: [collaborator_id], references: [id])
  Department_Leader Department_Leader[]

  @@map("leaders")
}

model Department_Leader {
  id         String   @id @default(uuid())
  leader_id  String
  department String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  Leader     Leader     @relation(fields: [leader_id], references: [id])
  Department Department @relation(fields: [department], references: [department])

  @@map("departments_leaders")
}

model Inventory {
  id         String   @id @default(uuid())
  product_id String   @unique
  amount     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  Product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@map("inventory")
}

model Input {
  id         String   @id @default(uuid())
  product_id String
  amount     Int
  user_id    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  Product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  User    User    @relation(fields: [user_id], references: [id])

  @@map("inputs")
}

model OutputOrder {
  id              String   @id @default(uuid())
  product_id      String
  collaborator_id String
  finality        String
  amount          Int
  status          Boolean
  obs             String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  collaboratorId  String?

  Product      Product      @relation(fields: [product_id], references: [id])
  Collaborator Collaborator @relation(fields: [collaborator_id], references: [id], name: "collaborator")

  @@map("output_orders")
}

model OutputOrderHistory {
  id              String   @id @default(uuid())
  product_id      String
  collaborator_id String
  finality        String
  amount          Int
  status          Boolean
  obs             String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  collaboratorId  String?

  Product      Product      @relation(fields: [product_id], references: [id])
  Collaborator Collaborator @relation(fields: [collaborator_id], references: [id], name: "collaborator")

  @@map("output_orders_history")
}

model Output {
  id              String   @id @default(uuid())
  product_id      String
  collaborator_id String
  user_id         String
  finality        String
  amount          Int
  status          Boolean
  obs             String
  expiration      Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  Product        Product      @relation(fields: [product_id], references: [id])
  Collaborator   Collaborator @relation(fields: [collaborator_id], references: [id], name: "collaborator")
  User           User         @relation(fields: [user_id], references: [id])
  collaboratorId String?

  @@map("outputs")
}

model OutputHistory {
  id              String   @id @default(uuid())
  product_id      String?
  collaborator_id String?
  user_id         String
  finality        String
  amount          Int
  status          Boolean
  obs             String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  Product        Product?      @relation(fields: [product_id], references: [id], onDelete: Cascade)
  Collaborator   Collaborator? @relation(fields: [collaborator_id], references: [id], name: "collaborator", onDelete: SetNull)
  User           User          @relation(fields: [user_id], references: [id])
  collaboratorId String?

  @@map("outputs_history")
}

model Return {
  id                  String   @id @default(uuid())
  product_id          String
  user_id             String
  collaborator_id_in  String?
  collaborator_id_out String?
  finality            String
  amount_has          Int
  amount              Int
  amount_bad          Int
  status_in           Boolean
  status_out          Boolean
  obs_in              String
  obs_out             String
  date_in             DateTime
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  Product         Product       @relation(fields: [product_id], references: [id], onDelete: Cascade)
  CollaboratorIn  Collaborator? @relation(fields: [collaborator_id_in], references: [id], name: "responsible_in", onDelete: SetNull)
  CollaboratorOut Collaborator? @relation(fields: [collaborator_id_out], references: [id], name: "responsible_out", onDelete: SetNull)
  User            User          @relation(fields: [user_id], references: [id])

  @@map("returns")
}

model ProductsOnDepartments {
  product_id String
  department String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  Product    Product    @relation(fields: [product_id], references: [id], onDelete: Cascade)
  Department Department @relation(fields: [department], references: [department])

  @@id([product_id, department])
  @@map("products_departments")
}

model Product {
  id            String       @id @default(uuid())
  product       String
  service       String
  type          String
  size          String
  unitary_value Float
  finality      RetreatTypes
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  Inventory          Inventory[]
  Input              Input[]
  Output             Output[]
  Service            Service                 @relation(fields: [service], references: [service])
  Type               Type                    @relation(fields: [type], references: [type])
  OutputHistory      OutputHistory[]
  Return             Return[]
  BarCodes           BarCode[]
  Departments        ProductsOnDepartments[]
  OutputOrder        OutputOrder[]
  OutputOrderHistory OutputOrderHistory[]

  @@unique([product, service, type, size])
  @@map("products")
}

model Service {
  service   String    @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]

  @@map("services")
}

model Type {
  type      String    @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]

  @@map("types")
}

model BarCode {
  code       String   @id
  product_id String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  Product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@map("barcodes")
}
